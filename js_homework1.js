/* Вам необхідно вказати, яким буде результат операції та описати крок за кроком у вигляді коментарів, як відбувається перетворення в кожному прикладі:


'number' + 3 + 3

null + 3

5 && "qwerty"

+'40' + +'2' + "hillel";

'10' - 5 === 6;

true + false

'4px' - 3

'4' - 3

'6' + 3 ** 0;

12 / '6'

'10' + (5 === 6);

null == ''

3 ** (9 / 3);

!!'false' == !!'true'

0 || '0' && 1

(+null == false) < 1;

false && true || true

false && (false || true);

(+null == false) < 1 ** 5;

*/



//  1) 'number' + 3 + 3

let task1 = 'number' + 3 + 3
console.log('1. result is - ' + task1)   // результат -  number33

//  Об'єднання рядків (конкатенація) -  string 'number' і неявно перетворених number 3  в  '3'


// 2) null + 3

let task2 = null + 3
console.log('2. result is - ' + task2)   // результат -  3

// додавання null((неявне перетворення в 0) до 3


// 3)   5 && "qwerty"

let task3 = 5 && "qwerty"
console.log('3. result is - ' + task3)   // результат -  qwerty



// 4)  +'40' + +'2' + "hillel";

let task4 = +'40' + +'2' + "hillel";
console.log('4. result is - ' + task4)   // результат -  42hillel


/*   <<В JavaScript унарний плюс (+) не має особливого впливу на числа. 
Це означає, що застосування унарного плюса перед числом не змінює його значення.
Однак, унарний плюс виконує перетворення до числа (coercion) для значень, які не є числами. >> 

Тому - +'40' + +'2' + "hillel"; - плюс попереду перетворить '40' і '2' на числа, просумує їх 40+2=42 і далі конкатенація з рядком "hillel" */



// 5) '10' - 5 === 6;

let task5 = '10' - 5 === 6;
console.log('5. result is - ' + task5)   // результат -  false

// '10' перетворюється в numberб тоож 10-5 = 5 і це не дорівнює 6, тож false


// 6) true + false

let task6 = true + false
console.log('6. result is - ' + task6)   // результат -  1

// true і false для додавання перетворюються в 1+0 = 1



// 7) '4px' - 3

let task7 = '4px' - 3
console.log('7. result is - ' + task7)   // результат -  NaN

// '4px' - рядок який не може бути перетворений в number, тож віднімання не може бути здійснене, тож результат - не число




// 8) '4' - 3

let task8 = '4' - 3
console.log('8. result is - ' + task8)   // результат -  1

// '4' - рядок який  може бути перетворений в number, тож віднімання відбувається , 4-3=1




// 9) '6' + 3 ** 0;

let task9 = '6' + 3 ** 0;
console.log('9. result is - ' + task9)   // результат -  61

// відбувається конкатенація з рядком '6', а піднімання в степінь 3 в 0й степені = 1
// (?) чому не відбувається перетворення  '6' на number ? може тому що першим іде рядок, тож автоматично включається конкатенація ?



// 10) 12 / '6'

let task10 = 12 / '6'
console.log('10. result is - ' + task10)   // результат -  2

// відбувається неявне перетворення '6' в number і ділення , 12/6=2




// 11)  '10' + (5 === 6);

let task11 = '10' + (5 === 6);
console.log('11. result is - ' + task11)   // результат -  10false
 
// відбувається конкатенація рядка "10" і булевого результату (5 === 6) = false, перетвореного у рядок 





// 12)  null == ''

let task12 = null == ''
console.log('12. result is - ' + task12)   // результат -  false
 
// null не рівний пустому рядку



// 13)  3 ** (9 / 3);

let task13 = 3 ** (9 / 3);
console.log('13. result is - ' + task13)   // результат -  27
 
// 3 в степені  3




// 14)  !!'false' == !!'true'

let task14 = !!'false' == !!'true'
console.log('14. result is - ' + task14)   // результат -  true
 
// <<Оператор !!   Думаю, вы уже знакомы с логическим оператором "НЕ” - !. Так вот оператор !! действует следующим образом: первый знак ! приводит значение к логическому и инвертирует его. Например, !true равняется false. Второй оператор ! снова инвертирует полученное значение. В нашем примере !false приравнивается к true.>>
// подвійне  заперечення, застосоване до не пустого string, тобто !!1=!!1, 1=1


// 15) 0 || '0' && 1

let task15 = 0 || '0' && 1
console.log('15. result is - ' + task15)   // результат -  1
 
// 0 або '0' i  1 ,  i вище за або, тобто 0 || ('0' && 1) , де ('0' && 1) = (1 && 1) = true - і повертає отстанній true - 1.   
// далі 0 || 1 = true, повертає останнє true значення, тобто 1



// 16) (+null == false) < 1;

let task16 = (+null == false) < 1;
console.log('16. result is - ' + task16)   // результат -  false
 
// <<Однак, унарний плюс виконує перетворення до числа (coercion) для значень, які не є числами. >> , тоді +null = 0
//  0 == false - true.    true < 1 - false , бо 1<1 . результат -  false


// 17) false && true || true

let task17 = false && true || true
console.log('17. result is - ' + task17)   // результат -  true
 
//  (false && true)  = false
// false|| true = true



// 18) false && (false || true);

let task18 = false && (false || true);
console.log('18. result is - ' + task18)   // результат -  false
 
//  (false || true)  = true       false && true  = false



// 19) (+null == false) < 1 ** 5;   */

let task19 = (+null == false) < 1 ** 5;   
console.log('19. result is - ' + task19)   // результат -  false
  
// (+null == false)= 0 == false = 0 ==0 - true.  1 ** 5 = 1   , true  < 1  = 1 < 1  - false

